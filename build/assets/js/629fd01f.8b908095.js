"use strict";(self.webpackChunkKatalon_Docs=self.webpackChunkKatalon_Docs||[]).push([[40177],{3905:(e,t,s)=>{s.d(t,{Zo:()=>p,kt:()=>m});var a=s(67294);function i(e,t,s){return t in e?Object.defineProperty(e,t,{value:s,enumerable:!0,configurable:!0,writable:!0}):e[t]=s,e}function n(e,t){var s=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),s.push.apply(s,a)}return s}function o(e){for(var t=1;t<arguments.length;t++){var s=null!=arguments[t]?arguments[t]:{};t%2?n(Object(s),!0).forEach((function(t){i(e,t,s[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(s)):n(Object(s)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(s,t))}))}return e}function l(e,t){if(null==e)return{};var s,a,i=function(e,t){if(null==e)return{};var s,a,i={},n=Object.keys(e);for(a=0;a<n.length;a++)s=n[a],t.indexOf(s)>=0||(i[s]=e[s]);return i}(e,t);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);for(a=0;a<n.length;a++)s=n[a],t.indexOf(s)>=0||Object.prototype.propertyIsEnumerable.call(e,s)&&(i[s]=e[s])}return i}var r=a.createContext({}),c=function(e){var t=a.useContext(r),s=t;return e&&(s="function"==typeof e?e(t):o(o({},t),e)),s},p=function(e){var t=c(e.components);return a.createElement(r.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},k=a.forwardRef((function(e,t){var s=e.components,i=e.mdxType,n=e.originalType,r=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),k=c(s),m=i,h=k["".concat(r,".").concat(m)]||k[m]||d[m]||n;return s?a.createElement(h,o(o({ref:t},p),{},{components:s})):a.createElement(h,o({ref:t},p))}));function m(e,t){var s=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var n=s.length,o=new Array(n);o[0]=k;var l={};for(var r in t)hasOwnProperty.call(t,r)&&(l[r]=t[r]);l.originalType=e,l.mdxType="string"==typeof e?e:i,o[1]=l;for(var c=2;c<n;c++)o[c]=s[c];return a.createElement.apply(null,o)}return a.createElement.apply(null,s)}k.displayName="MDXCreateElement"},22522:(e,t,s)=>{s.r(t),s.d(t,{assets:()=>r,contentTitle:()=>o,default:()=>d,frontMatter:()=>n,metadata:()=>l,toc:()=>c});var a=s(87462),i=(s(67294),s(3905));const n={id:"93b948b0-22b2-11ed-9930-0242fe3e4a3f",title:"[Mobile] Take Screenshot As Checkpoint",slug:"create-tests/keywords/keyword-description-in-katalon-studio/visual-based-mobile-testing-keywords/mobile-take-screenshot-as-checkpoint",hide_title:!0},o='<a id="id_0" class="anchor_top_offset"/><a id="ariaid-title1" class="anchor_top_offset"/>[Mobile] Take Screenshot As Checkpoint',l={unversionedId:"93b948b0-22b2-11ed-9930-0242fe3e4a3f",id:"93b948b0-22b2-11ed-9930-0242fe3e4a3f",title:"[Mobile] Take Screenshot As Checkpoint",description:"Note:",source:"@site/docs/93b948b0-22b2-11ed-9930-0242fe3e4a3f.md",sourceDirName:".",slug:"/create-tests/keywords/keyword-description-in-katalon-studio/visual-based-mobile-testing-keywords/mobile-take-screenshot-as-checkpoint",permalink:"/docs/create-tests/keywords/keyword-description-in-katalon-studio/visual-based-mobile-testing-keywords/mobile-take-screenshot-as-checkpoint",draft:!1,tags:[],version:"current",frontMatter:{id:"93b948b0-22b2-11ed-9930-0242fe3e4a3f",title:"[Mobile] Take Screenshot As Checkpoint",slug:"create-tests/keywords/keyword-description-in-katalon-studio/visual-based-mobile-testing-keywords/mobile-take-screenshot-as-checkpoint",hide_title:!0},sidebar:"aSidebar",previous:{title:"[Mobile] Take Element Screenshot As Checkpoint",permalink:"/docs/create-tests/keywords/keyword-description-in-katalon-studio/visual-based-mobile-testing-keywords/mobile-take-element-screenshot-as-checkpoint"},next:{title:"[WS] Contains String",permalink:"/docs/create-tests/keywords/keyword-description-in-katalon-studio/web-service-keywords/ws-contains-string"}},r={},c=[{value:'<a id="id_0__id_1" class="anchor_top_offset"/>takeScreenshotAsCheckpoint',id:"takescreenshotascheckpoint",level:2}],p={toc:c};function d(e){let{components:t,...s}=e;return(0,i.kt)("wrapper",(0,a.Z)({},p,s,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"mobile-take-screenshot-as-checkpoint"},(0,i.kt)("a",{id:"id_0",class:"anchor_top_offset"}),(0,i.kt)("a",{id:"ariaid-title1",class:"anchor_top_offset"}),"[Mobile]"," Take Screenshot As Checkpoint"),(0,i.kt)("div",{xmlns:"http://www.w3.org/1999/xhtml",className:"p"},(0,i.kt)("div",{className:"note note note_note"},(0,i.kt)("span",{className:"note__title"},"Note:"),(0,i.kt)("ul",{className:"ul"},(0,i.kt)("li",{className:"li"},(0,i.kt)("p",{className:"p"},"From version ",(0,i.kt)("strong",{className:"ph b"},"7.9"),", this keyword is available."))))),(0,i.kt)("h2",{id:"takescreenshotascheckpoint"},(0,i.kt)("a",{id:"id_0__id_1",class:"anchor_top_offset"}),"takeScreenshotAsCheckpoint"),(0,i.kt)("ul",{xmlns:"http://www.w3.org/1999/xhtml",className:"ul"},(0,i.kt)("li",{className:"li"},"     ",(0,i.kt)("strong",{className:"ph b"},"Description"),": Take a screenshot of the current     application to send to TestOps Vision. The captured image will be     saved to the ",(0,i.kt)("strong",{className:"ph b"},"keyes")," folder in the report. The     screenshot will not include OS's status and navigation bars."),(0,i.kt)("li",{className:"li"},"     ",(0,i.kt)("strong",{className:"ph b"},"Keyword name"),": takeScreenshotAsCheckpoint"),(0,i.kt)("li",{className:"li"},"     ",(0,i.kt)("strong",{className:"ph b"},"Keyword syntax"),":     ",(0,i.kt)("pre",{className:"pre codeblock"},(0,i.kt)("code",null,"Mobile.takeScreenshotAsCheckpoint(String checkpointName, List<TestObject> ignoredElements, Color hidingColor, FailureHandling flowControl)")),"   "),(0,i.kt)("li",{className:"li"},"     ",(0,i.kt)("p",{className:"p"},"       ",(0,i.kt)("strong",{className:"ph b"},"Parameters"),":"),"     ",(0,i.kt)("ul",{className:"ul"},(0,i.kt)("li",{className:"li"},"         ",(0,i.kt)("p",{className:"p"},"Name: checkpointName"),"         ",(0,i.kt)("ul",{className:"ul"},(0,i.kt)("li",{className:"li"},"Description: A String representing the name of the image on             TestOps Vision. This name will be used to detect which baseline             this checkpoint is compared with. This name will be appended with             the TestOps Vision prefix ('keyes-') on a local machine."),(0,i.kt)("li",{className:"li"},"Parameter Type: String"),(0,i.kt)("li",{className:"li"},"Mandatory: Required")),"       "),(0,i.kt)("li",{className:"li"},"         ",(0,i.kt)("p",{className:"p"},"Name: ignoredElements"),"         ",(0,i.kt)("ul",{className:"ul"},(0,i.kt)("li",{className:"li"},"Description: List of the ignored elements. These elements will             be hidden by drawing an overlap color layer. If the test engine             failed to hide the element by any problems, this keyword would             continue without impacting the result."),(0,i.kt)("li",{className:"li"},"Parameter Type: List           "),(0,i.kt)("li",{className:"li"},"Mandatory: Optional")),"       "),(0,i.kt)("li",{className:"li"},"         ",(0,i.kt)("p",{className:"p"},"Name: hidingColor"),"         ",(0,i.kt)("ul",{className:"ul"},(0,i.kt)("li",{className:"li"},"Description: The color used to draw the overlap layer. If not             defined, Color.GRAY is used."),(0,i.kt)("li",{className:"li"},"Parameter Type: Color"),(0,i.kt)("li",{className:"li"},"Mandatory: Optional")),"       "),(0,i.kt)("li",{className:"li"},"         ",(0,i.kt)("p",{className:"p"},"Name: flowControl"),"         ",(0,i.kt)("ul",{className:"ul"},(0,i.kt)("li",{className:"li"},"Description: Specify ",(0,i.kt)("a",{className:"xref",href:"/docs/maintain/configure-failure-handling-settings-in-katalon-studio"},"failure handling"),"             schema to determine whether the execution should be allowed to             continue or stop."),(0,i.kt)("li",{className:"li"},"STOP",(0,i.kt)("em",{className:"ph i"},"ON"),"FAILURE: throws a StepFailedException if the             step fails (default)."),(0,i.kt)("li",{className:"li"},"CONTINUE",(0,i.kt)("em",{className:"ph i"},"ON"),"FAILURE: continues the test if the test             fails, but the test result is still FAILED."),(0,i.kt)("li",{className:"li"},"OPTIONAL: continues the test and ignores the test result."),(0,i.kt)("li",{className:"li"},"Parameter Type: FailureHandling"),(0,i.kt)("li",{className:"li"},"Mandatory: Optional")),"       ")),"   "),(0,i.kt)("li",{className:"li"},"     ",(0,i.kt)("p",{className:"p"},"       ",(0,i.kt)("strong",{className:"ph b"},"Return"),": a String representing the path to the       captured image."),"   "),(0,i.kt)("li",{className:"li"},"     ",(0,i.kt)("strong",{className:"ph b"},"Throw"),": StepFailedException If the test engine     can't store the image in the disk."),(0,i.kt)("li",{className:"li"},"     ",(0,i.kt)("strong",{className:"ph b"},"Example"),":",(0,i.kt)("div",{className:"p"},(0,i.kt)("pre",{className:"pre codeblock"},(0,i.kt)("code",null,"Mobile.takeScreenshotAsCheckpoint('screenshot_keyes', [findTestObject('hide_element_1'), findTestObject('hide_element_2')], Color.RED, FailureHandling.STOP_ON_FAILURE)","\n"))))))}d.isMDXComponent=!0}}]);
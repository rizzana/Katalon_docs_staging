"use strict";(self.webpackChunkKatalon_Docs=self.webpackChunkKatalon_Docs||[]).push([[37101],{3905:(e,t,a)=>{a.d(t,{Zo:()=>p,kt:()=>f});var s=a(67294);function n(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function r(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);t&&(s=s.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,s)}return a}function o(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?r(Object(a),!0).forEach((function(t){n(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):r(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function i(e,t){if(null==e)return{};var a,s,n=function(e,t){if(null==e)return{};var a,s,n={},r=Object.keys(e);for(s=0;s<r.length;s++)a=r[s],t.indexOf(a)>=0||(n[a]=e[a]);return n}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(s=0;s<r.length;s++)a=r[s],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(n[a]=e[a])}return n}var l=s.createContext({}),c=function(e){var t=s.useContext(l),a=t;return e&&(a="function"==typeof e?e(t):o(o({},t),e)),a},p=function(e){var t=c(e.components);return s.createElement(l.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return s.createElement(s.Fragment,{},t)}},d=s.forwardRef((function(e,t){var a=e.components,n=e.mdxType,r=e.originalType,l=e.parentName,p=i(e,["components","mdxType","originalType","parentName"]),d=c(a),f=n,u=d["".concat(l,".").concat(f)]||d[f]||m[f]||r;return a?s.createElement(u,o(o({ref:t},p),{},{components:a})):s.createElement(u,o({ref:t},p))}));function f(e,t){var a=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var r=a.length,o=new Array(r);o[0]=d;var i={};for(var l in t)hasOwnProperty.call(t,l)&&(i[l]=t[l]);i.originalType=e,i.mdxType="string"==typeof e?e:n,o[1]=i;for(var c=2;c<r;c++)o[c]=a[c];return s.createElement.apply(null,o)}return s.createElement.apply(null,a)}d.displayName="MDXCreateElement"},16713:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>c,contentTitle:()=>i,default:()=>d,frontMatter:()=>o,metadata:()=>l,toc:()=>p});var s=a(87462),n=(a(67294),a(3905)),r=a(44996);const o={id:"8fbf85d0-22b2-11ed-9930-0242fe3e4a3f",title:"Binary Statements",slug:"create-tests/create-test-cases/statements/binary-statements",hide_title:!0},i='<a id="concept-8396" class="anchor_top_offset"/><a id="ariaid-title1" class="anchor_top_offset"/>Binary Statements',l={unversionedId:"8fbf85d0-22b2-11ed-9930-0242fe3e4a3f",id:"8fbf85d0-22b2-11ed-9930-0242fe3e4a3f",title:"Binary Statements",description:"A Binary statement represents a dual expression consisting of two single&nbsp;expressions&nbsp;(variables, strings, numbers, methods...) and an operator, for example&nbsp;Operators.",source:"@site/docs/8fbf85d0-22b2-11ed-9930-0242fe3e4a3f.md",sourceDirName:".",slug:"/create-tests/create-test-cases/statements/binary-statements",permalink:"/docs/create-tests/create-test-cases/statements/binary-statements",draft:!1,tags:[],version:"current",frontMatter:{id:"8fbf85d0-22b2-11ed-9930-0242fe3e4a3f",title:"Binary Statements",slug:"create-tests/create-test-cases/statements/binary-statements",hide_title:!0},sidebar:"aSidebar",previous:{title:"Exception Handling statements",permalink:"/docs/create-tests/create-test-cases/statements/exception-handling-statements"},next:{title:"Method Call Statements",permalink:"/docs/create-tests/create-test-cases/statements/method-call-statements"}},c={},p=[{value:'<a id="task-9090" class="anchor_top_offset"/>In manual view',id:"in-manual-view",level:2},{value:'<a id="concept-7451" class="anchor_top_offset"/>In script view',id:"in-script-view",level:2},{value:"In Script view",id:"in-script-view-1",level:3}],m={toc:p};function d(e){let{components:t,...a}=e;return(0,n.kt)("wrapper",(0,s.Z)({},m,a,{components:t,mdxType:"MDXLayout"}),(0,n.kt)("h1",{id:"binary-statements"},(0,n.kt)("a",{id:"concept-8396",class:"anchor_top_offset"}),(0,n.kt)("a",{id:"ariaid-title1",class:"anchor_top_offset"}),"Binary Statements"),(0,n.kt)("p",{xmlns:"http://www.w3.org/1999/xhtml",className:"p"},"A Binary statement represents a dual expression consisting of two single\xa0",(0,n.kt)("strong",{className:"ph b"},"expressions"),"\xa0(variables, strings, numbers, methods...) and an operator, for example: +, -, *, <, <=,\xa0!, etc.). For more details about using operators in Groovy, refer to\xa0this Groovy documentation:\xa0",(0,n.kt)("a",{className:"xref j-external-link",href:"http://groovy-lang.org/operators.html",target:"_blank"},"Operators"),"."),(0,n.kt)("div",{xmlns:"http://www.w3.org/1999/xhtml",className:"p"},(0,n.kt)("div",{className:"note note note_note"},(0,n.kt)("span",{className:"note__title"},"Note:")," ",(0,n.kt)("ul",{className:"ul"},(0,n.kt)("li",{className:"li"},(0,n.kt)("p",{className:"p"},"Once a test step is added as any of the control statements, it is not allowed to change into another keyword."))))),(0,n.kt)("h2",{id:"in-manual-view"},(0,n.kt)("a",{id:"task-9090",class:"anchor_top_offset"}),"In manual view"),(0,n.kt)("ol",{xmlns:"http://www.w3.org/1999/xhtml",className:"ol steps"},(0,n.kt)("li",{className:"li step stepexpand"},(0,n.kt)("span",{className:"ph cmd"},"Open a test case in\xa0",(0,n.kt)("span",{className:"ph uicontrol"},"Manual"),"\xa0view. Click on the drop-down icon of the\xa0",(0,n.kt)("span",{className:"ph uicontrol"},"Add")," button, then choose\xa0",(0,n.kt)("span",{className:"ph uicontrol"},"Binary Statements"),".")),(0,n.kt)("li",{className:"li step stepexpand"},(0,n.kt)("span",{className:"ph cmd"},"To add a keyword under a statement, select that statement, then click ",(0,n.kt)("span",{className:"ph uicontrol"},"Add"),". A test step is created under that statement."),(0,n.kt)("div",{className:"itemgroup info"},(0,n.kt)("img",{className:"image",width:300,src:(0,r.Z)("/8fde7f80-22b2-11ed-9930-0242fe3e4a3f.png"),alt:"binary statement"})),(0,n.kt)("div",{className:"itemgroup stepresult"},"A test step representing a binary statement is added to the test case.",(0,n.kt)("p",{className:"p"},(0,n.kt)("img",{className:"image",width:600,src:(0,r.Z)("/8fe36180-22b2-11ed-9930-0242fe3e4a3f.png"),alt:"add binary statement"})))),(0,n.kt)("li",{className:"li step stepexpand"},(0,n.kt)("span",{className:"ph cmd"},"Double-click on the ",(0,n.kt)("span",{className:"ph uicontrol"},"Input")," cell to edit those required components. "),(0,n.kt)("div",{className:"itemgroup info"},"Binary statements are normally used to assign either values to test objects",(0,n.kt)("p",{className:"p"},(0,n.kt)("img",{className:"image",width:600,src:(0,r.Z)("/8fd64220-22b2-11ed-9930-0242fe3e4a3f.png"),alt:"Binary statement"})),(0,n.kt)("p",{className:"p"},"or test objects to variables to take the next steps."),(0,n.kt)("p",{className:"p"},(0,n.kt)("img",{className:"image",width:600,src:(0,r.Z)("/8fe5ab70-22b2-11ed-9930-0242fe3e4a3f.png"),alt:"Binary statement"})))),(0,n.kt)("li",{className:"li step stepexpand"},(0,n.kt)("span",{className:"ph cmd"},"Save the test case when you're done."),(0,n.kt)("div",{className:"itemgroup info"},(0,n.kt)("img",{className:"image",width:600,src:(0,r.Z)("/8fd77aa0-22b2-11ed-9930-0242fe3e4a3f.png"),alt:"Binary statements step"})))),(0,n.kt)("h2",{id:"in-script-view"},(0,n.kt)("a",{id:"concept-7451",class:"anchor_top_offset"}),"In script view"),(0,n.kt)("h3",{id:"in-script-view-1"},"In Script view"),(0,n.kt)("p",{xmlns:"http://www.w3.org/1999/xhtml",className:"p"}," The ",(0,n.kt)("span",{className:"ph uicontrol"},"Script")," view of a test case allows you to programmatically define and handle binary statements using Groovy or Java languages. "),(0,n.kt)("p",{xmlns:"http://www.w3.org/1999/xhtml",className:"p"},"For example : "),(0,n.kt)("ul",{xmlns:"http://www.w3.org/1999/xhtml",className:"ul"},(0,n.kt)("li",{className:"li"},"     ",(0,n.kt)("p",{className:"p"},"To assign a value to a test object"),"     ",(0,n.kt)("pre",{className:"pre codeblock"},(0,n.kt)("code",null,"myText = 'Welcome to Katalon Studio'")),"   "),(0,n.kt)("li",{className:"li"},"     ",(0,n.kt)("p",{className:"p"},"To assign a test object to a variable"),"     ",(0,n.kt)("pre",{className:"pre codeblock"},(0,n.kt)("code",null,"myObject = findTestObject('my object') WebUI.setText(myObject, 'Welcome to Katalon Studio') WebUI.verifyTextPresent('Welcome to Katalon Studio', false)")),"   ")))}d.isMDXComponent=!0}}]);